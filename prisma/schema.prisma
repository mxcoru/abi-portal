// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MEMBER
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  emailVerified      DateTime?
  image              String?
  credits            Int                  @default(5)
  role               UserRole             @default(MEMBER)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  CreatedVotes       SongVoteRequest[]
  accounts           Account[]
  sessions           Session[]
  songs              Song[]
  Authenticator      Authenticator[]
  SongVote           SongVote?
  EndSongVoteRequest EndSongVoteRequest[]
  EndSongVote        EndSongVote?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum SongStatus {
  REQUESTED
  FINISHED
  DECLINED
}

model Song {
  id        String     @id @default(cuid())
  order     Int        @default(0)
  userId    String
  title     String     @default("")
  url       String     @default("")
  fileId    String     @default("")
  start     Int        @default(0)
  end       Int        @default(0)
  status    SongStatus @default(REQUESTED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SongVoteRequest {
  id        String  @id @default(cuid())
  title     String  @default("")
  url       String  @default("")
  start     Int     @default(0)
  end       Int     @default(0)
  fileId    String  @default("")
  finished  Boolean @default(false)
  creatorId String

  user  User       @relation(fields: [creatorId], references: [id], onDelete: SetDefault)
  votes SongVote[]
}

model SongVote {
  id            String @id @default(cuid())
  songRequestId String
  voterId       String @unique

  voter       User            @relation(fields: [voterId], references: [id], onDelete: SetDefault)
  songRequest SongVoteRequest @relation(fields: [songRequestId], references: [id], onDelete: Cascade)
}

model EndSongVoteRequest {
  id        String  @id @default(cuid())
  title     String  @default("")
  url       String  @default("")
  start     Int     @default(0)
  end       Int     @default(0)
  fileId    String  @default("")
  finished  Boolean @default(false)
  creatorId String

  user  User          @relation(fields: [creatorId], references: [id], onDelete: SetDefault)
  votes EndSongVote[]
}

model EndSongVote {
  id            String @id @default(cuid())
  songRequestId String
  voterId       String @unique

  voter       User               @relation(fields: [voterId], references: [id], onDelete: SetDefault)
  songRequest EndSongVoteRequest @relation(fields: [songRequestId], references: [id], onDelete: Cascade)
}
